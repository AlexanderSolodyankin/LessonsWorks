//package Nurdin.Lessons26;
//
//import java.text.DecimalFormat;
//import java.util.Random;
//import java.util.Scanner;
//
//public class Main {
//    static Scanner cin = new Scanner(System.in);
//    static Random rand = new Random();
//    static DecimalFormat df = new DecimalFormat("#.###");
//
//    public static void A() {
////        SkillsMonkey monkey = new Monkey("Обезьяна", new Monkey("qq", null));
//        SkillsMonkey monkey = new Monkey("обезьяна", null);
//        monkey.climb();
//        monkey.drag();
//        monkey.eatFruit();
//    }
//
//    public static void B() {
//        /*
//        1. Что такое интерфейс?
//            interface - это абстрактный тип данных созданный программистом
//        в котором прописаны поведения объектов которые реализуют его.
//
//        2. В чем преимущество использования интерфейсов?
//            Преимущество использования интерфейсов в Полиморфизме.
//
//        3. Как работают свойства в интерфейсов?
//            Свойства становятся сразу static final.
//
//        4. Может ли один интерфейс унаследовать другой? Каким образом
//            Да, через ключевое слово extends.
//
//        5. Что такое композиция?
//            Композияция это когда класс состоит из объектов или методов созданных в этом же классе.
//
//        6. Что такое наследование?
//            Это создание нового класса на основе уже ранее созданного.
//
//        7. В чем отличие между наследованием и композицией?
//            Основное отличие между наследованием и композицией в том, что композиция позволяет использовать код без его расширения.
//        Наследование при этом требует расширения существующего класса. Другое важное отличие: при композиции мы можем повторно
//        использовать код даже из final-класса, тогда как унаследоваться от него нельзя.
//        */
//    }
//
//    public static void main(String[] args) {
//        A();
//    }
//}